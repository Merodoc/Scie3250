data = read.csv("clipboard")
data
data = read.csv("clipboard")
data = read.csv("clipboard", header = FALSE)
data
libray(lattice)
library(lattice)
x <- data$V3
y <- data$V4
plot(x, y)
x <- data$V4
y <- data$V5
plot(x, y)
data = read.csv("clipboard", header = FALSE)
data
data[0:15]
help("read.csv")
data[1]
data[1][1]
data[1,1]
levels(data)
levels(data[1])
fdata = fator(data)
fdata = factor(data)
data = read.csv("clipboard", header = FALSE)
dataset = read.csv("clipboard", header = FALSE)
yena1 = read.csv("clipbaord", header = FALSE)
yena1 = read.csv("clipboard", header = FALSE)
x <- yena1$V4
y <- yena1$V5
plot(x,y)
x <- yena1$V5
y <- yena1$V6
plot(x,y)
x
y
var.test(x)
var.test(x, y)
library(lattice)
bwplot(x,y)
plot(x,y, h)
plot(x,y, type = h)
plot(x,y, type = 'h'')
kill
end
exit
newdata <- dataset[order(dataset$V2)]
newdata <- dataset[order(V2)]
dataset[ order(dataset[,2])]
dataset[ order(dataset[,2]),]
newdata <- dataset[ order(dataset[,2]),]
AZAB <- newdata[1,15]
newdata
AZAB <- newdata[c(1,15)]
AZAB
AZAB <- newdata[c(1,15),]
AZAB
AZAB <- newdata[(1,15),]
AZABvec <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
AZABvec
AZAB <- newdata[AZABvec,]
AZAB
library(plotly)
p <- plot_ly(y = AZAB$V6, type="box")
p
p <- plot_ly(x = AZAB$V6, type="box")
p
p <- plot_ly(x = AZAB$V6, type="box", boxpoints = "all", jitter = 0.3, pointpos = -1.8)
p
p <- plot_ly(x = AZAB$V6, type="box", boxpoints = "all", jitter = 100, pointpos = -300)
p
AZAB$V6
AZAB$V5
p <- plot_ly(AZAB, x = AZAB$v1, y = AZAB$V5, type = "box") %>%> layout(boxmode = "group")
p <- plot_ly(AZAB, x = AZAB$v1, y = AZAB$V5, type = "box") %>% layout(boxmode = "group")
p
p <- plot_ly(AZAB, x = AZAB$v1, y = AZAB$V5, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$V5, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$v1, color = AZAB$7, type = "box") %>% layout(mapbox = "group")
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$v6, color = AZAB$7, type = "box") %>% layout(mapbox = "group")
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$v1, color = AZAB$v7, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$V5, color = AZAB$v1, type = "box") %>% layout(mapbox = "group")
p
p
p <- plot_ly(AZAB, y = AZAB$V5, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$V1 color = AZAB$V7, type = "box") %>% layout(mapbox = "group")
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$V1, color = AZAB$V7, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$V5, x = AZAB$V1, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
startvec = c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95)
endvec = c(6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96)
p <- plot_ly(AZAB, y = AZAB$Vstartvec, x = AZAB$V1, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
p <- plot_ly(AZAB, y = AZAB$Vstartvec, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
AZAB$startvec
AZAB$Vstartvec
AZAB[startvec,]
AZAB[, startvec]
y <- AZAB[, startvec]
p <- plot_ly(AZAB, y = y, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
p
p
y
p <- plot_ly(y = y, color = AZAB$V1, type = "box") %>% layout(mapbox = "group")
p
startloc = y
y
startlocs
startloc
p <- plot_ly(y = startloc, type = "box", boxpoints = "all", jitter = 1000, pointpos = -3000
)
p <- plot_ly(y = startloc, type = "box", boxpoints = "all", jitter = 1000, pointpos = -3000)
p
testdata = read.csv("clipboard")
testdata
plotlocs <- AZAB[, startvec]
p <- plot_ly(y = plotlocs, type = "box", boxpoints = "all", jitter = 1000, pointpos = -3000)
p
AZAB <- testdata[AZABvec,]
plotlocs <- AZAB[, startvec]
p <- plot_ly(y = plotlocs, type = "box", boxpoints = "all", jitter = 1000, pointpos = -3000)
p
library("BradleyTerry2")
NRL <- read.csv("NRL.csv")
setwd("C:/Users/Rowan/Scie3250")
NRL <- read.csv("NRL.csv")
NRL
read.csv()
help(read)
help("read.csv")
NRL <- read.csv("NRL.csv", header = TRUE)
NRL
NRL <- read.csv(file = "NRL.csv".row.names = 1)
NRL <- read.csv(file = "NRL.csv",row.names = 1)
NRL
results<-rep(1, nrow(NRL$Winner))
results<-rep(1, length(NRL$Winner))
BTm(results, Winner, Loser, data = NRL)
NRLModel <- BTm(results, Winner, Loser, data = NRL)
summary(NRLModel)
NRLModel <- BTm(results, Winner, Loser, data = NRL, refcat = "GCT")
summary(NRLModel)
NRLModel <- BTm(results, Winner, Loser, data = NRL, refcat = "NEW")
summary(NRLModel)
BTm
NRLModel$coefficients
NRLModel$coefficients$BRO
NRLModel$coefficients["BRO"]
NRLModel$coefficients["1"]
NRLModel$coefficients[1]
NRLModel$
.
NRLModel$fitted.values
NRLModel$coefficients[1]
NRLModel$coefficients[1,1]
NRLModel$coefficients[2]
x <- NRLModel$coefficients[1]
x
x <- NRLModel$coefficients[1,]
x <- NRLModel$coefficients[,1]
x <- NRLModel$coefficients[1]
x <- NRLModel$coefficients[1][1]
x
x[1]
x[2]
x[,]
x,1
x[,1]
y <- NRLModel$coefficients[2]
x-y
y
logit[x-y]
x/(x+y)
for (val in NRLModel$coefficients) {}
for (val in NRLModel$coefficients) {}
ones <- (1:length(NRLModel$coefficients))
ones <- ones(1:length(NRLModel$coefficients))
ones <- rep(1,length(NRLModel$coefficients))
zero <- ()
zero <- ()
(1,2)
zero <- []
zero <- c()
for (val in NRLModel$coefficients) {c(zero,NRLModel$coefficients[val])}
for (i in NRLModel$coefficients) {c(zero,NRLModel$coefficients[i])}
for (i in NRLModel$coefficients) {c(zero,NRLModel$coefficients)}
for (i in (1:15)) {c(zero, NRLModel$coefficients[i])}
zeero
zero
zero <- c(0)
for (i in (1:15)) {c(zero, NRLModel$coefficients[i])}
for (i  in (1:15)) {print(i)}
for (i in (1:15)) {zero <- c(zero, NRLModel$coefficients[i])}
zero
for (i in (1:15)) {c(, NRLModel$coefficients[i])}
for (i in (1:15)) {c((), NRLModel$coefficients[i])}
zero <- c()
for (i in (1:15)) {zero <- c(zero, NRLModel$coefficients[i])}
zero
zero[1]-zer[]2
zero[1]-zero[2]
zero["..BRO"]-zero[2]
zero["..""BRO"]
zero[".."+"BRO"]
zero["..","BRO"]
zero["..","BRO"]
BTMpredict.R
library("BTmpredict")
source("BTmpredict.R")
BTmpredict(NRLModel, "..BRO", "..MEL")
source("BTmpredict.R")
BTmpredict(NRLModel, "..BRO", "..MEL")
source("BTmpredict.R")
BTmpredict(NRLModel, "..BRO", "..MEL")
source("BTmpredict.R")
BTmpredict(NRLModel, "..BRO", "..MEL")
source("BTmpredict.R")
BTmpredict(NRLModel, "..BRO", "..MEL")
